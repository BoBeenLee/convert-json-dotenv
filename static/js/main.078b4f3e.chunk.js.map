{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","Header","Title","h2","ChangeButton","button","Content","Editor","textarea","Seperator","View","pre","jsonToEnv","jsonStr","prevJsonText","jsonObject","JSON","parse","_","reduce","keys","res","key","e","envToJson","envStr","env","replace","$0","$1","$2","stringify","undefined","App","state","isJsonToEnv","editorText","viewText","changeEditor","value","target","setState","toggle","prevState","this","onClick","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k4CAIA,IAAMA,EAAcC,YAAH,KAWXC,EAAYC,IAAOC,IAAV,KAOTC,EAASF,IAAOC,IAAV,KAENE,EAAQH,IAAOI,GAAV,KAILC,EAAeL,IAAOM,OAAV,KAEZC,EAAUP,IAAOC,IAAV,KAOPO,EAASR,IAAOS,SAAV,KAMNC,EAAYV,IAAOC,IAAV,KAMTU,EAAOX,IAAOY,IAAV,KASJC,EAAY,SAACC,EAASC,GAC1B,IACE,IAAMC,EAAaC,KAAKC,MAAMJ,GAC9B,OAAOK,IAAEC,OACPD,IAAEE,KAAKL,IACP,SAACM,EAAKC,GACJ,OAAOD,EAAG,YAAQC,EAAR,YAAeP,EAAWO,MAEtC,IAEF,MAAOC,GACP,OAAOT,IAILU,EAAY,SAAAC,GAChB,IAAMC,EAAM,GAIZ,OAHAD,EAAOE,QAAQ,eAAe,SAASC,EAAIC,EAAIC,GAC7CJ,EAAIG,GAAMC,KAELd,KAAKe,UAAUL,OAAKM,EAAW,IAmDzBC,E,2MA/CbC,MAAQ,CACNC,aAAa,EACbC,WAAY,GACZC,SAAU,I,EAuBZC,aAAe,SAAAf,GACb,IAAMgB,EAAQhB,EAAEiB,OAAOD,MADL,EAEgB,EAAKL,MAA/BC,EAFU,EAEVA,YAAaE,EAFH,EAEGA,SAErB,EAAKI,SAAS,CACZL,WAAYG,EACZF,SAAUF,EAAcvB,EAAU2B,EAAOF,GAAYb,EAAUe,M,EAInEG,OAAS,WACP,EAAKD,UAAS,SAAAE,GACZ,MAAO,CACLP,WAAYO,EAAUN,SACtBA,SAAUM,EAAUP,WACpBD,aAAcQ,EAAUR,iB,wEAnCpB,IAAD,EACuCS,KAAKV,MAA3CC,EADD,EACCA,YAAaC,EADd,EACcA,WAAYC,EAD1B,EAC0BA,SACjC,OACE,kBAACvC,EAAD,KACE,kBAACF,EAAD,MACA,kBAACK,EAAD,KACE,kBAACC,EAAD,KAAQiC,EAAW,mCACnB,kBAAC/B,EAAD,CAAcyC,QAASD,KAAKF,QACxBP,EAAD,oCAGL,kBAAC7B,EAAD,KACE,kBAACC,EAAD,CAAQuC,SAAUF,KAAKN,aAAcC,MAAOH,IAC5C,kBAAC3B,EAAD,WACA,kBAACC,EAAD,KAAO2B,S,GArBCU,aCrEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.078b4f3e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport _ from \"lodash\";\n\nconst GlobalStyle = createGlobalStyle`\nhtml,\nbody, #root {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  height: 100vh;\n  width: 100vw;\n}\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  height: 100%;\n`;\n\nconst Header = styled.div``;\n\nconst Title = styled.h2`\n  text-align: center;\n`;\n\nconst ChangeButton = styled.button``;\n\nconst Content = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  padding-top: 10px;\n`;\n\nconst Editor = styled.textarea`\n  display: flex;\n  width: 50%;\n  flex: 1;\n`;\n\nconst Seperator = styled.div`\n  width: 30px;\n  height: 100%;\n  text-align: center;\n`;\n\nconst View = styled.pre`\n  display: flex;\n  width: 50%;\n  flex: 1;\n  padding: 0px;\n  margin: 0px;\n  background-color: #f1f1f1;\n`;\n\nconst jsonToEnv = (jsonStr, prevJsonText) => {\n  try {\n    const jsonObject = JSON.parse(jsonStr);\n    return _.reduce(\n      _.keys(jsonObject),\n      (res, key) => {\n        return res + `\\n${key}=${jsonObject[key]}`;\n      },\n      \"\"\n    );\n  } catch (e) {\n    return prevJsonText;\n  }\n};\n\nconst envToJson = envStr => {\n  const env = {};\n  envStr.replace(/(\\w+)=(.+)/g, function($0, $1, $2) {\n    env[$1] = $2;\n  });\n  return JSON.stringify(env, undefined, 2);\n};\n\nclass App extends Component {\n  state = {\n    isJsonToEnv: true,\n    editorText: \"\",\n    viewText: \"\"\n  };\n\n  render() {\n    const { isJsonToEnv, editorText, viewText } = this.state;\n    return (\n      <Container>\n        <GlobalStyle />\n        <Header>\n          <Title>{isJsonToEnv ? `JSON TO DOTENV` : `DOTENV TO JSON`}</Title>\n          <ChangeButton onClick={this.toggle}>\n            {!isJsonToEnv ? `JSON TO DOTENV` : `DOTENV TO JSON`}\n          </ChangeButton>\n        </Header>\n        <Content>\n          <Editor onChange={this.changeEditor} value={editorText} />\n          <Seperator>=></Seperator>\n          <View>{viewText}</View>\n        </Content>\n      </Container>\n    );\n  }\n\n  changeEditor = e => {\n    const value = e.target.value;\n    const { isJsonToEnv, viewText } = this.state;\n\n    this.setState({\n      editorText: value,\n      viewText: isJsonToEnv ? jsonToEnv(value, viewText) : envToJson(value)\n    });\n  };\n\n  toggle = () => {\n    this.setState(prevState => {\n      return {\n        editorText: prevState.viewText,\n        viewText: prevState.editorText,\n        isJsonToEnv: !prevState.isJsonToEnv\n      };\n    });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}